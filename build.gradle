plugins {
    id 'maven'
    id 'java'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'net.researchgate.release' version '2.7.0'
    id 'eclipse'
    id 'org.testeditor.gradle-plugin' version '0.8'
}

description = """Testing framework for web applications using Selenium for automating browsers see https://www.seleniumhq.org/"""

apply from: 'code-style/codestyle.gradle'

// Configure the testeditor plugin
testeditor {
    version '1.17.1'
    xtextVersion '2.13.0'
}

task cleanScreenshotDir(type: Delete) {
    description = "cleanup any screenshots written"
    delete fileTree(dir: "${projectDir}/screenshots", include: "**/*.png")
}

test.dependsOn cleanScreenshotDir

def coreFixtureVersion = "4.2.+"
def seleniumJavaVersion = "3.14.0"
def commonsFixtureVersion = "1.2.+"
def webdriverManagerVersion = "3.0.0"

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.apache.logging.log4j:log4j-core:2.11.0'
    compile 'org.apache.logging.log4j:log4j-api:2.11.0'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.0'

    // Testing now with JUnit5
    testCompileOnly 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.1.0' //For tests that needs JUnit 4.X 

    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.6'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.6'
    // these are just added for web-fixtures
    compile "org.testeditor.fixture:core-fixture:$coreFixtureVersion"
    compile "org.testeditor.fixture:commons-fixture:$commonsFixtureVersion"
    compile "org.seleniumhq.selenium:selenium-java:$seleniumJavaVersion"
    compile 'com.paulhammant:ngwebdriver:1.1.3'
    compile "io.github.bonigarcia:webdrivermanager:$webdriverManagerVersion"
    compile 'com.google.code.gson:gson:2.8.2'
}

configurations.all {
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        // failOnVersionConflict()

        // force certain versions of dependencies (including transitive)
        //  *append new forced modules:
        force 'org.slf4j:slf4j-api:1.7.18', "org.seleniumhq.selenium:selenium-java:$seleniumJavaVersion"
    }
}

sourceSets.main.resources.srcDirs = [ "src/main/java" ]
sourceSets.main.resources.includes = [ "**/*.aml" ]

/*
 * code below copied from core-fixture
 */
repositories {
    jcenter()
    mavenCentral() // This is very important for JUnit 5 tests to execute see https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-running-unit-tests-with-gradle/
    maven { url "http://dl.bintray.com/test-editor/Fixtures/" }
    maven { url "http://dl.bintray.com/test-editor/maven/" }
}

group = 'org.testeditor.fixture'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// show standard out during test to see logging output
test {
    // enable JUnit 5 support
    useJUnitPlatform()
    // show standard out during test to see logging output
    testLogging.showStandardStreams = true
}

jar {
    manifest {
        attributes 'Implementation-Title': "${project.group}.${project.name}",
                   'Implementation-Version': project.version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

install {
    repositories.mavenInstaller {
        pom.packaging = 'jar'
    }
}

release {
    preTagCommitMessage = '[release]'
    tagCommitMessage = '[release]'
    newVersionCommitMessage = '[release] new version'
    tagTemplate = 'v${version}'
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'Fixtures'
        name = project.name
        userOrg = 'test-editor'
        licenses = ['EPL-1.0']
        vcsUrl = "https://github.com/test-editor/${project.name}.git"
        version {
            name = project.version
            vcsTag = "v$project.version"
        }
        websiteUrl = 'http://testeditor.org'
    }
}
