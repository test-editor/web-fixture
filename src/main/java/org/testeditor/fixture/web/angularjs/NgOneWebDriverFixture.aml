package org.testeditor.fixture.web.angularjs

import static org.testeditor.fixture.web.LocatorStrategy.ID

interaction type wait {
	template = "Wait" ${seconds} "seconds"
	method = NgOneWebDriverFixture.waitSeconds(seconds)
}

interaction type waitUntilElementFound {
    template = "Wait" ${seconds} "seconds until" ${element} "is found"
    method = NgOneWebDriverFixture.waitUntilElementFound(element, locatorStrategy, seconds)
}

interaction type startBrowser {
	template = "Start" ${element}
	method = NgOneWebDriverFixture.startBrowser(element)
}

interaction type startFireFoxPortable {
	label = "Start browser firefox portable"
	template = "Start firefox portable" ${path}
	method = NgOneWebDriverFixture.startFireFoxPortable(path)
}

interaction type goToUrl {
	template = "Browse" ${url}
	method = NgOneWebDriverFixture.goToUrl(url)
}

interaction type getTitle {
    template = "Get title"
    method = NgOneWebDriverFixture.getTitle()
}

interaction type closeBrowser {
	template = "Close browser"
	method = NgOneWebDriverFixture.closeBrowser
}

interaction type setActiveBrowser {
	template = "Set active browser" ${browser}
	method = NgOneWebDriverFixture.setDriver(browser)
}

interaction type typeInto {
	template = "Enter" ${value} "into" ${element}
	method = NgOneWebDriverFixture.typeInto(element, locatorStrategy, value)
}

interaction type typeConfidentialIntoConfidential {
	template = "Enter confidential" ${value} "into" ${element}
	method = NgOneWebDriverFixture.typeConfidentialIntoConfidential(element, locatorStrategy, value)
}

interaction type typeConfidentialInto {
	template = "Enter confidential" ${value} "into insecure field " ${element}
	method = NgOneWebDriverFixture.typeConfidentialInto(element, locatorStrategy, value)
}

interaction type isTextOnPage {
	template = "Is text" ${value} "on page"
	method = NgOneWebDriverFixture.isTextOnPage(value)
}

value-space seleniumKeys = #["NULL", "CANCEL", "HELP", "BACK_SPACE", "TAB", "CLEAR", "RETURN", "ENTER", "SHIFT", "LEFT_SHIFT", "CONTROL", "LEFT_CONTROL", "ALT", "LEFT_ALT", "PAUSE", "ESCAPE", "SPACE", "PAGE_UP", "PAGE_DOWN", "END", "HOME", "LEFT", "ARROW_LEFT", "UP", "ARROW_UP", "RIGHT", "ARROW_RIGHT", "DOWN", "ARROW_DOWN", "INSERT", "DELETE", "SEMICOLON", "EQUALS", "NUMPAD0", "NUMPAD1", "NUMPAD2", "NUMPAD3", "NUMPAD4", "NUMPAD5", "NUMPAD6", "NUMPAD7", "NUMPAD8", "NUMPAD9", "MULTIPLY", "ADD", "SEPARATOR", "SUBTRACT", "DECIMAL", "DIVIDE", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "META", "COMMAND", "ZENKAKU_HANKAKU"]

interaction type sendSpecialKey {
	template = "Press key" ${value}
	method = NgOneWebDriverFixture.pressSpecialKey(value)
	restrict value to seleniumKeys
}

interaction type submit {
    template = "Submit element" ${element}
    method = NgOneWebDriverFixture.submit(element, locatorStrategy)
}

interaction type clear {
	template = "Clear" ${element}
	method = NgOneWebDriverFixture.clear(element, locatorStrategy)
}

interaction type click {
	template = "Click" ${element}
	method = NgOneWebDriverFixture.clickOn(element, locatorStrategy)
}

interaction type selectInSelection {
	template = "Select" ${value} "from" ${element}
	method = NgOneWebDriverFixture.selectElementInSelection(element, locatorStrategy, value)
}

interaction type getAvailableOptions {
	template = "Read available" ${element}
	method = NgOneWebDriverFixture.getOptionsInSelection(element, locatorStrategy)
}

interaction type readValue {
	template = "Read" ${element}
	method = NgOneWebDriverFixture.readValue(element, locatorStrategy)
}

interaction type executeScript {
	template = "Execute script" ${value}
	method = NgOneWebDriverFixture.setExecuteScript(value)	
}

interaction type checkEnabled {
	template = "Is" ${element} "enabled"
	method = NgOneWebDriverFixture.checkEnabled(element, locatorStrategy)

}

element type BrowserApplication {
	interactions = startBrowser, startFireFoxPortable, executeScript, getTitle, submit, sendSpecialKey
}

element type field {
	interactions = typeInto, typeConfidentialIntoConfidential, typeConfidentialInto, submit, waitUntilElementFound, clear, sendSpecialKey, readValue
}

element type button {
	interactions = click, submit, checkEnabled, waitUntilElementFound, readValue
}

element type selection {
	interactions = click, submit, selectInSelection, getAvailableOptions, waitUntilElementFound, clear, sendSpecialKey, readValue
}

element type dateTimePicker {
	interactions = click, readValue, waitUntilElementFound, sendSpecialKey
}

element type labelElement {
	interactions = readValue, waitUntilElementFound
}

component type GeneralBrowser {
	interactions = wait, waitUntilElementFound, goToUrl, closeBrowser, setActiveBrowser, sendSpecialKey, isTextOnPage
}

component type Page {
	interactions = wait, waitUntilElementFound, submit, getTitle, sendSpecialKey, isTextOnPage
}

component WebBrowser is GeneralBrowser {
	element defaultBrowser is BrowserApplication {
		locator ="default"
		locatorStrategy = ID
	}
	
	element Firefox is BrowserApplication {
		label = "Firefox"
		locator ="firefox"
		locatorStrategy = ID
	}

	element IE is BrowserApplication {
		label = "Internet Explorer"
		locator ="ie"
		locatorStrategy = ID
	}
	
	element Chrome is BrowserApplication {
		label = "Chrome"
		locator ="chrome"
		locatorStrategy = ID
	}
}
